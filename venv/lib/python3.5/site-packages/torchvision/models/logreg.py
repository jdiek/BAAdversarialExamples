import torch.nn as nn
import torch.utils.model_zoo as model_zoo
import torchvision.datasets as dsets
import torch
import torchvision.transforms as transforms
from torch.autograd import Variable
import foolbox
import numpy as np



size = 28 #size of image nxn pixel
__all__ = ['logreg']

class LogisticRegression(nn.Module):
    def __init__(self, input_size, num_classes):
        super(LogisticRegression, self).__init__()
        self.linear = nn.Linear(input_size, num_classes)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        out = self.linear(x)
        return out

def logreg(pretrained=False):
    # Hyper Parameters
    input_size = size*size
    num_classes = 10
    num_epochs = 10
    batch_size = 100
    learning_rate = 0.001

    transform = transforms.Compose([
        transforms.Resize((size,size)),
        transforms.ToTensor()])

    # MNIST Dataset (Images and Labels)
    train_dataset = dsets.MNIST(root='.',
                                train=True,
                                transform=transform,
                                download=True)


    test_dataset = dsets.MNIST(root='.',
                               train=False,
                               transform=transform
                               )

    # Dataset Loader (Input Pipline)
    train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                               batch_size=batch_size,
                                               shuffle=True)

    test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                              batch_size=batch_size,
                                              shuffle=False)

    logReg = LogisticRegression(input_size, num_classes)

    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(logReg.parameters(), lr=learning_rate)
    print(train_dataset.train_data.shape)

    # Training the Model
    for epoch in range(num_epochs):
        for i, (images, labels) in enumerate(train_loader):
            images = Variable(images.view(-1, size * size))
            labels = Variable(labels)

            # Forward + Backward + Optimize
            optimizer.zero_grad()
            outputs = logReg(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

    # Test the Model
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = Variable(images.view(-1, size* size))
        outputs = logReg(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum()

    print('Accuracy of the model on the 10000 test images: %d %%' % (100 * correct / total))

    return logReg